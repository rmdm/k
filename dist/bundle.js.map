{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/panel.js","webpack:///./lib/canvas.js","webpack:///./lib/checkboxes.js","webpack:///./lib/scrollbar.js","webpack:///./lib/night_switch.js","webpack:///./index.js","webpack:///./lib/chart_factory.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Panel","canvas","scrollbar","scrollCanvas","checkboxes","options","_classCallCheck","this","div","document","createElement","className","titleEl","textContent","header","appendChild","el","render","width","setSize","enable","nightMode","remove","months","days","getAxisColor","alpha","getColor","getMeshColor","g","b","a","getPixelRatio","window","devicePixelRatio","toCssSize","fromCssSize","binarySearch","arr","val","arguments","length","undefined","j","v","Canvas","data","hex","_this","label","canvas_classCallCheck","decor","x","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","columns","iterator","next","done","column","types","err","return","getX","lines","result","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","push","getLines","canvasEl","ctx","getContext","setBasicSizes","padW","padH","datesDiff","lineWidth","height","currentLeft","from","currentRight","to","currentRange","xDiff","lineStates","lineGrades","lineColors","names","colors","parseInt","slice","fromHeight","toHeight","currentHeight","getMaxY","heightGrade","fromPeriod","toPeriod","datesGrade","prevMs","setFont","fontSize","fontFamily","legendEl","legendTitleEl","rulerEl","style","legendLines","els","values","cross","lineEl","lineValEl","lineLabelEl","lineCrossEl","getLineColor","color","addEventListener","e","onMouseMove","onMouseLeave","onMouseEnter","onTouchMove","onTouchStart","onTouchEnd","hideLegend","left","right","animate","display","_this2","animation","cancelAnimationFrame","requestAnimationFrame","step","ms","diffMs","animationGrade","linesDone","clear","clearRect","dX","dY","grade","max","approximate","Infinity","drawGrid","drawDates","drawLines","current","strokeStyle","beginPath","moveTo","chartHeight","lineTo","chartWidth","stroke","fromValuesDiff","toValuesDiff","fromLinesDiff","toLinesDiff","Math","round","drawGridLines","linesDiff","valuesDiff","fillStyle","y","fillText","textSize","currentDiff","fromFillStyle","toFillStyle","scale","toN","floor","drawDate","fromN","Date","text","getMonth","getDate","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","line","drawLine","scaleX","scaleY","getStrokeStyle","initialIndex","getLowerIndex","prevX","prevXCoord","zeroH","yCoord","someVisible","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","moveLegendTo","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","moveOffset","offsetLeft","getBoundingClientRect","position","closestIndex","getClosestIndex","percent","getDay","leftOffset","legendOffsetWidth","offsetWidth","additionalOffset","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","topOffset","top","offsetHeight","nextOffset","getUpperIndex","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","resize","ratio","textFamily","size","family","font","procent","upperIndex","lowerIndex","stopPropagation","clientX","showLegend","targetTouches","checkboxCount","Checkboxes","checkboxes_classCallCheck","_loop","checkboxId","checkboxEl","checkEl","type","id","onCheck","checkSignEl","checkSignBgEl","labelEl","htmlFor","checked","disable","Scrollbar","scrollbar_classCallCheck","leftAreaEl","rightAreaEl","scrollBoxEl","scrollBoxLeftBorderEl","scrollBoxRightBorderEl","bound","move","onMouseBoth","onMouseLeft","onMouseRight","onMouseUp","onTouchBoth","onTouchLeft","onTouchRight","drawAreas","drawScrollBox","scrollWidth","lastWidth","offsetDiff","dOffset","preventDefault","setBothMove","setLeftMove","setRightMove","setNoMove","setMove","changedTouches","NightSwitch","cb","night_switch_classCallCheck","state","textEl","switch","setText","bodyEl","getElementsByTagName","factory","parent","panel","panels","getElementById","datum","nightSwitch","forEach"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","class Panel {\n\n    constructor (canvas, scrollbar, scrollCanvas, checkboxes, options) {\n        const div = document.createElement('div')\n        div.className = 'panel'\n\n        const titleEl = document.createElement('h4')\n        titleEl.className = 'chart-title'\n        titleEl.textContent = options.header\n\n        div.appendChild(titleEl)\n        div.appendChild(canvas.el)\n        div.appendChild(scrollbar.el)\n        div.appendChild(checkboxes.el)\n        this.canvas = canvas\n        this.scrollbar = scrollbar\n        this.scrollCanvas = scrollCanvas\n        this.checkboxes = checkboxes\n        this.el = div\n    }\n\n    render () {\n        this.canvas.render()\n        this.scrollbar.render()\n        this.checkboxes.render()\n    }\n\n    scale (width) {\n        this.canvas.setSize(width, 320, true)\n        this.scrollCanvas.setSize(width, 32, true)\n        this.render()\n    }\n\n    nightMode (enable) {\n        this.canvas.nightMode(enable)\n    }\n\n    destroy () {\n        this.el.remove()\n    }\n}\n\nexport default Panel\n","const animationDurationMs = 250\nconst dateOffset = 18\n\nconst months = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n]\n\nconst days = [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ]\n\nconst getAxisColor = function (alpha) {\n    return getColor(100, 130, 140, 0.7 * alpha)\n}\n\nconst getMeshColor = function (alpha) {\n    return getColor(155, 180, 190, 0.2 * alpha)\n}\n\nclass Canvas {\n\n    constructor (data, options) {\n\n        this.data = data\n        this.decor = options.decor\n\n        this.x = getX(data)\n        this.lines = getLines(data)\n\n        this.el = document.createElement('div')\n        this.el.className = 'chart'\n\n        this.canvasEl = document.createElement('canvas')\n        this.ctx = this.canvasEl.getContext('2d')\n\n        this.setBasicSizes(options.padW, options.padH, options.datesDiff, options.lineWidth)\n        this.setSize(options.width, options.height)\n\n        this.currentLeft = options.from\n        this.currentRight = options.to\n        this.currentRange = options.to - options.from\n\n        this.xDiff = this.x[this.x.length - 1] - this.x[1]\n\n        this.lineStates = {}\n        this.lineGrades = {}\n        this.lineColors = {}\n        for (let label in data.names) {\n            this.lineStates[label] = true\n            this.lineGrades[label] = 1\n            this.lineColors[label] = toRGBA(data.colors[label])\n        }\n\n        this.fromHeight = this.toHeight = this.currentHeight =\n            this.getMaxY(options.from, options.to)\n        this.heightGrade = 1\n\n        this.fromPeriod = this.toPeriod = 0\n        this.datesGrade = 1\n\n        this.prevMs = undefined\n\n        this.el.appendChild(this.canvasEl)\n\n        if (options.decor) {\n\n            this.setFont(options.fontSize, options.fontFamily)\n\n            this.legendEl = document.createElement('div')\n            this.legendEl.className = 'legend'\n\n            this.legendTitleEl = document.createElement('div')\n            this.legendTitleEl.className = 'legend-title'\n            this.legendEl.appendChild(this.legendTitleEl)\n\n            this.rulerEl = document.createElement('div')\n            this.rulerEl.className = 'ruler'\n            this.rulerEl.style.height = toCssSize(this.height - this.padH) + 'px'\n            this.el.appendChild(this.rulerEl)\n\n            this.legendLines = { els: {}, values: {}, cross: {} }\n            for (let label in data.names) {\n\n                const lineEl = this.legendLines.els[label] = document.createElement('div')\n                lineEl.className = 'legend-line'\n\n                const lineValEl = this.legendLines.values[label] = document.createElement('div')\n                lineValEl.className = 'legend-value'\n\n                const lineLabelEl = document.createElement('div')\n                lineLabelEl.className = 'legend-label'\n                lineLabelEl.textContent = data.names[label]\n\n                const lineCrossEl = this.legendLines.cross[label] = document.createElement('div')\n                lineCrossEl.className = 'line-cross'\n                lineCrossEl.style['border-color'] = this.getLineColor(label, 1)\n\n                this.el.appendChild(lineCrossEl)\n\n                lineEl.appendChild(lineValEl)\n                lineEl.appendChild(lineLabelEl)\n\n                lineEl.style.color = this.getLineColor(label, 1)\n                this.legendEl.appendChild(lineEl)\n            }\n\n            this.el.appendChild(this.legendEl)\n\n            this.el.addEventListener('mousemove', e => this.onMouseMove(e))\n            this.el.addEventListener('mouseleave', e => this.onMouseLeave(e))\n            this.el.addEventListener('mouseenter', e => this.onMouseEnter(e))\n\n            this.el.addEventListener('touchmove', e => this.onTouchMove(e))\n            this.el.addEventListener('touchstart', e => this.onTouchStart(e))\n            this.el.addEventListener('touchend', e => this.onTouchEnd(e))\n\n            this.hideLegend()\n        }\n    }\n\n    move (left, right) {\n        this.currentLeft = left\n        this.currentRight = right\n        this.currentRange = right - left\n        this.animate()\n    }\n\n    disable (label) {\n        if (this.lineStates[label]) {\n            this.lineStates[label] = false\n            this.lineGrades[label] = 1 - this.lineGrades[label]\n            this.animate()\n            if (this.decor) {\n                this.legendLines.els[label].style.display = 'none'\n                this.legendLines.cross[label].style.display = 'none'\n            }\n        }\n    }\n\n    enable (label) {\n        if (!this.lineStates[label]) {\n            this.lineStates[label] = true\n            this.lineGrades[label] = 1 - this.lineGrades[label]\n            this.animate()\n            if (this.decor) {\n                this.legendLines.els[label].style.display = 'inline-block'\n            }\n        }\n    }\n\n    animate () {\n\n        if (this.animation) {\n            cancelAnimationFrame(this.animation)\n        }\n\n        const step = (ms) => {\n\n            if (!this.prevMs) {\n                this.prevMs = ms\n                this.animation = requestAnimationFrame(step)\n                return\n            }\n\n            const diffMs = ms - this.prevMs\n            this.prevMs = ms\n\n            if (diffMs === 0) {\n                this.animation = requestAnimationFrame(step)\n                return\n            }\n\n            const animationGrade = diffMs / animationDurationMs\n\n            this.heightGrade += animationGrade\n            this.datesGrade += animationGrade\n\n            if (this.heightGrade >= 1) {\n                this.heightGrade = 1\n                this.fromHeight = this.toHeight\n            }\n\n            if (this.datesGrade >= 1) {\n                this.datesGrade = 1\n                this.fromPeriod = this.toPeriod\n            }\n\n            let linesDone = true\n            for (const label in this.lineGrades) {\n                this.lineGrades[label] += animationGrade\n                if (this.lineGrades[label] < 1) {\n                    linesDone = false\n                } else {\n                    this.lineGrades[label] = 1\n                }\n            }\n\n            if (this.heightGrade === 1 && this.datesGrade === 1 && linesDone) {\n                this.prevMs = undefined\n            } else {\n                this.animation = requestAnimationFrame(step)\n            }\n\n            this.clear()\n            this.render()\n        }\n\n        this.animation = requestAnimationFrame(step)\n    }\n\n    clear () {\n        this.ctx.clearRect(0, 0, this.width, this.height)\n    }\n\n    render () {\n\n        const dX = this.xDiff * (this.currentRange)\n        let dY = this.getMaxY(this.currentLeft, this.currentRight)\n\n        if (this.toHeight !== dY) {\n            this.fromHeight = this.currentHeight\n            this.heightGrade = 0\n            this.toHeight = dY\n        }\n\n        this.currentHeight = approximate(this.fromHeight, this.toHeight, this.heightGrade, Infinity)\n\n        if (this.decor) {\n            this.drawGrid(this.fromHeight, this.toHeight, this.currentHeight, this.heightGrade)\n            this.drawDates()\n        }\n\n        this.drawLines(this.currentLeft, this.currentRight, dX, this.currentHeight)\n    }\n\n    drawGrid (from, to, current, grade) {\n\n        this.ctx.lineWidth = fromCssSize(this.lineWidth / 2)\n        this.ctx.strokeStyle = getMeshColor(1)\n\n        this.ctx.beginPath()\n\n        this.ctx.moveTo(this.padW, this.chartHeight + this.padH)\n        this.ctx.lineTo(this.padW + this.chartWidth, this.chartHeight + this.padH)\n\n        this.ctx.stroke()\n\n        let fromValuesDiff = from / 5\n        let toValuesDiff = to / 5\n        const fromLinesDiff = this.chartHeight / current * fromValuesDiff\n        const toLinesDiff = this.chartHeight / current * toValuesDiff\n        fromValuesDiff = Math.round(fromValuesDiff)\n        toValuesDiff = Math.round(toValuesDiff)\n\n        this.drawGridLines(toLinesDiff, toValuesDiff, grade)\n\n        if (grade < 1) {\n            this.drawGridLines(fromLinesDiff, fromValuesDiff, 1 - grade)\n        }\n    }\n\n    drawGridLines (linesDiff, valuesDiff, grade) {\n\n        this.ctx.fillStyle = getAxisColor(grade)\n        this.ctx.strokeStyle = getMeshColor(grade)\n        this.ctx.beginPath()\n\n        for (\n            let i = 0,\n                y = this.chartHeight + this.padH - linesDiff,\n                val = valuesDiff;\n            i < 5;\n            i++, y -= linesDiff, val += valuesDiff\n        ) {\n            this.ctx.fillText(val, this.padW, y - this.textSize / 2)\n            this.ctx.moveTo(this.padW, y)\n            this.ctx.lineTo(this.padW + this.chartWidth, y)\n        }\n\n        this.ctx.stroke()\n    }\n\n    drawDates () {\n\n        if (this.currentRange <= (1 / this.x.length)) {\n            this.fromPeriod = 0\n            return\n        }\n\n        if (this.fromPeriod === 0) {\n            this.fromPeriod = this.toPeriod =\n                this.datesDiff * (this.currentRange) / this.chartWidth\n        }\n\n        const currentDiff = this.toPeriod * this.chartWidth / (this.currentRange)\n\n        if (currentDiff >= 2 * this.datesDiff) {\n            this.toPeriod = this.toPeriod / 2\n            this.datesGrade = 0\n        } else if (currentDiff < this.datesDiff) {\n            if (this.fromPeriod < this.toPeriod) {\n                this.fromPeriod = this.fromPeriod * 2\n            }\n            this.toPeriod = this.toPeriod * 2\n            this.datesGrade = 0\n        }\n\n        const scale = this.chartWidth / (this.currentRange)\n        const y = this.chartHeight + this.padH + 1.5 * this.textSize\n\n        let fromFillStyle, toFillStyle\n\n        if (this.fromPeriod > this.toPeriod) {\n            toFillStyle = getAxisColor(this.datesGrade)\n            fromFillStyle = getAxisColor(1)\n        } else {\n            toFillStyle = getAxisColor(1)\n            fromFillStyle = getAxisColor(1 - this.datesGrade)\n        }\n\n        this.ctx.fillStyle = toFillStyle\n        const toN = Math.floor(this.currentLeft / this.toPeriod) - 1\n        for (let p = this.toPeriod * toN; p < this.currentRight + this.toPeriod; p += this.toPeriod) {\n            this.drawDate(p, scale, y)\n        }\n\n        this.ctx.fillStyle = fromFillStyle\n        const fromN = Math.floor(this.currentLeft / this.fromPeriod) - 1\n        for (let p = this.fromPeriod * fromN; p < this.currentRight + this.fromPeriod; p += this.fromPeriod) {\n            this.drawDate(p, scale, y)\n        }\n    }\n\n    drawDate (p, scale, y) {\n        const d = new Date(Math.floor(this.x[1] + this.xDiff * p))\n        const text = months[d.getMonth()] + ' ' + d.getDate()\n        this.ctx.fillText(text, this.padW + (p - this.currentLeft) * scale - fromCssSize(dateOffset), y)\n    }\n\n    drawLines (left, right, dX, dY) {\n        for (let line of this.lines) {\n            if (this.lineStates[line[0]] || this.lineGrades[line[0]] < 1) {\n                this.drawLine(line, left, right, dX, dY)\n            }\n        }\n    }\n\n    drawLine (line, left, right, dX, dY) {\n\n        const scaleX = this.chartWidth / dX\n        const scaleY = this.chartHeight / dY\n\n        this.ctx.lineWidth = fromCssSize(this.lineWidth)\n        this.ctx.strokeStyle = this.getStrokeStyle(line)\n\n        const initialIndex = this.getLowerIndex(left - this.padW / this.chartWidth)\n\n        let prevX = this.x[initialIndex]\n        let prevXCoord = this.padW +\n            ((prevX - this.x[1]) / (this.xDiff) - left) * this.chartWidth / (right - left)\n\n        const zeroH = this.padH + this.chartHeight\n\n        this.ctx.beginPath()\n        this.ctx.moveTo(prevXCoord, zeroH - line[initialIndex] * scaleY)\n\n        for (let i = initialIndex + 1; i < line.length; i++) {\n\n            const x = this.x[i]\n            const y = line[i]\n\n            const yCoord = zeroH - y * scaleY\n\n            prevXCoord = prevXCoord + (x - prevX) * scaleX\n\n            // it is faster here to write every segment separately\n            this.ctx.lineTo(prevXCoord, yCoord)\n            this.ctx.stroke()\n            this.ctx.beginPath()\n            this.ctx.moveTo(prevXCoord, yCoord)\n\n            prevX = x\n\n            if (prevXCoord > this.width) {\n                break\n            }\n        }\n\n        this.ctx.stroke()\n    }\n\n    showLegend () {\n        let someVisible = false\n        for (const line of this.lines) {\n            if (this.lineStates[line[0]]) {\n                this.legendLines.cross[line[0]].style.display = 'block'\n                someVisible = true\n            }\n        }\n        if (someVisible) {\n            this.legendEl.style.display = 'inline-block'\n            this.rulerEl.style.display = 'block'\n            this.moveLegendTo(0)\n        }\n    }\n\n    hideLegend () {\n        this.legendEl.style.display = 'none'\n        this.rulerEl.style.display = 'none'\n        for (const line of this.lines) {\n            this.legendLines.cross[line[0]].style.display = 'none'\n        }\n    }\n\n    moveLegendTo (moveOffset) {\n\n        const canvasLeftOffset = this.el.getBoundingClientRect().left\n        const offsetLeft = fromCssSize(moveOffset - canvasLeftOffset)\n\n        let position = this.currentLeft + (offsetLeft - this.padW) / this.chartWidth * (this.currentRange)\n\n        if (position < this.currentLeft) {\n            position = this.currentLeft\n        } else if (position > this.currentRight) {\n            position = this.currentRight\n        }\n\n        const closestIndex = this.getClosestIndex(position)\n\n        const percent = (this.x[closestIndex] - this.x[1]) / this.xDiff\n\n        const d = new Date(Math.floor(this.x[1] + this.xDiff * percent))\n        const text = days[d.getDay()] + ', ' + months[d.getMonth()] + ' ' + d.getDate()\n\n        const xPos = this.padW + (percent - this.currentLeft) / (this.currentRange) * this.chartWidth\n\n        const leftOffset = toCssSize(xPos)\n\n        const legendOffsetWidth = this.legendEl.offsetWidth\n\n        let additionalOffset = 0\n\n        for (const line of this.lines) {\n            if (this.lineStates[line[0]]) {\n\n                const value = line[closestIndex]\n\n                const topOffset = toCssSize(this.padH + this.chartHeight - value / this.currentHeight * this.chartHeight)\n\n                this.legendLines.values[line[0]].textContent = value\n                this.legendLines.cross[line[0]].style.top = topOffset - 5 + 'px'\n                this.legendLines.cross[line[0]].style.left = leftOffset - 5 + 'px'\n                if (topOffset - 10 < this.legendEl.offsetHeight) {\n                    additionalOffset = legendOffsetWidth / 2 + 10\n                }\n            }\n        }\n\n        let nextOffset = leftOffset - legendOffsetWidth / 2 + additionalOffset\n\n        if (nextOffset < 0) {\n            additionalOffset = additionalOffset ? -additionalOffset : legendOffsetWidth / 2 + 10\n        }\n\n        const rightOverflow = nextOffset + legendOffsetWidth - toCssSize(this.chartWidth + this.padW)\n\n        if (rightOverflow > 0) {\n            additionalOffset = additionalOffset ? -additionalOffset : -legendOffsetWidth / 2 - 10\n        }\n\n        this.rulerEl.style.left = leftOffset + 'px'\n        this.legendEl.style.left = leftOffset - legendOffsetWidth / 2 + additionalOffset + 'px'\n\n        this.legendTitleEl.textContent = text\n    }\n\n    getMaxY (left, right) {\n\n        let max = 0\n\n        const from = this.getLowerIndex(left)\n        const to = this.getUpperIndex(right)\n\n        for (const line of this.lines) {\n\n            if (!this.lineStates[line[0]]) {\n                continue\n            }\n\n            for (let i = from; i < to; i++) {\n                if (line[i] > max) {\n                    max = line[i]\n                }\n            }\n        }\n\n        return max\n    }\n\n    getStrokeStyle (line) {\n        const label = line[0]\n        return this.lineStates[label]\n            ? this.getLineColor(label, this.lineGrades[label])\n            : this.getLineColor(label, (1 - this.lineGrades[label]))\n    }\n\n    setSize (width, height, resize) {\n\n        const ratio = getPixelRatio()\n\n        this.width = width * ratio\n        this.canvasEl.width = width * ratio\n        this.canvasEl.style.width = width + 'px'\n\n        this.height = height * ratio\n        this.canvasEl.height = height * ratio\n        this.canvasEl.style.height = height + 'px'\n\n        this.chartWidth = this.width - 2 * this.padW\n        this.chartHeight = this.height - 2 * this.padH\n\n        if (this.decor && resize) {\n            this.setFont(toCssSize(this.textSize), this.textFamily)\n        }\n    }\n\n    setFont (size, family) {\n        this.textSize = fromCssSize(size)\n        this.textFamily = family\n        this.ctx.font = this.textSize + 'px ' + family\n    }\n\n    setBasicSizes (padW, padH, datesDiff, lineWidth) {\n\n        const ratio = getPixelRatio()\n\n        this.padW = padW * ratio\n        this.padH = padH * ratio\n        this.datesDiff = datesDiff * ratio\n        this.lineWidth = lineWidth\n    }\n\n    getLowerIndex (procent) {\n\n        const upperIndex = this.getUpperIndex(procent)\n\n        return Math.max(upperIndex - 1, 1)\n    }\n\n    getUpperIndex (procent) {\n        return binarySearch(this.x, this.x[1] + this.xDiff * procent, 1)\n    }\n\n    getClosestIndex (procent) {\n\n        const val = this.x[1] + this.xDiff * procent\n\n        const upperIndex = binarySearch(this.x, val, 1)\n        const lowerIndex = Math.max(upperIndex - 1, 1)\n\n        const lowerVal = this.x[lowerIndex]\n        const upperVal = this.x[upperIndex]\n\n        return val - lowerVal < upperVal - val ? lowerIndex : upperIndex\n    }\n\n    getLineColor (line, alpha) {\n        return this.lineColors[line] + alpha + ')'\n    }\n\n    nightMode (enable) {\n        if (enable) {\n            this.legendEl.className = 'legend night'\n            for (let label in this.legendLines.cross) {\n                this.legendLines.cross[label].className = 'line-cross night'\n            }\n        } else {\n            this.legendEl.className = 'legend'\n            for (let label in this.legendLines.cross) {\n                this.legendLines.cross[label].className = 'line-cross'\n            }\n        }\n    }\n\n    onMouseMove (e) {\n        e.stopPropagation()\n        this.moveLegendTo(e.clientX)\n    }\n\n    onMouseEnter (e) {\n        e.stopPropagation()\n        this.showLegend()\n        this.moveLegendTo(e.clientX)\n    }\n\n    onMouseLeave (e) {\n        e.stopPropagation()\n        this.hideLegend()\n    }\n\n    onTouchMove (e) {\n        e.stopPropagation()\n        this.moveLegendTo(e.targetTouches[0].clientX)\n    }\n\n    onTouchStart (e) {\n        e.stopPropagation()\n        this.showLegend()\n        this.moveLegendTo(e.targetTouches[0].clientX)\n    }\n\n    onTouchEnd (e) {\n        e.stopPropagation()\n        this.hideLegend()\n    }\n}\n\nfunction getX (data) {\n    for (let column of data.columns) {\n        if (data.types[column[0]] === 'x') {\n            return column\n        }\n    }\n}\n\nfunction getLines (data) {\n    const result = []\n    for (let column of data.columns) {\n        if (data.types[column[0]] === 'line') {\n            result.push(column)\n        }\n    }\n    return result\n}\n\nfunction approximate (from, to, grade, max) {\n\n    const val = (from - ( from - to ) * grade)\n\n    return val < 0\n        ? 0\n        : val > max ? max : val\n}\n\nfunction getColor (r, g, b, a) {\n    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'\n}\n\nfunction toRGBA (hex) {\n    return 'rgba('\n        + parseInt(hex.slice(1, 3), 16) + ','\n        + parseInt(hex.slice(3, 5), 16) + ','\n        + parseInt(hex.slice(5), 16) + ','\n}\n\nfunction getPixelRatio () {\n    return window.devicePixelRatio || 1\n}\n\nfunction toCssSize (value) {\n\n    const ratio = getPixelRatio()\n\n    return value / ratio\n}\n\nfunction fromCssSize (value) {\n\n    const ratio = getPixelRatio()\n\n    return value * ratio\n}\n\nfunction binarySearch (arr, val, i = 0) {\n\n    const len = arr.length\n\n    let j = len - 1\n\n    while (i <= j) {\n        if (i === j) {\n            return i\n        } else {\n            const m = (j + i) >>> 1\n            const v = arr[m]\n            if (v > val) {\n                j = m - 1\n            } else if (v < val) {\n                i = m + 1\n            } else {\n                return i\n            }\n        }\n    }\n\n    return i\n}\n\nexport default Canvas\n","let checkboxCount = 0\n\nclass Checkboxes {\n\n    constructor (data, canvas, scrollCanvas) {\n        this.data = data\n        this.canvas = canvas\n        this.scrollCanvas = scrollCanvas\n\n        this.el = document.createElement('div')\n        for (let label in data.names) {\n\n            const checkboxId = 'checkbox' + checkboxCount++\n\n            const checkboxEl = document.createElement('div')\n            checkboxEl.className = 'checkbox'\n\n            const checkEl = document.createElement('input')\n            checkEl.className = 'check'\n            checkEl.type = 'checkbox'\n            checkEl.id = checkboxId\n            checkEl.addEventListener('click', () => this.onCheck(label, checkEl))\n\n            const checkSignEl = document.createElement('div')\n            checkSignEl.className = 'sign'\n\n            const checkSignBgEl = document.createElement('div')\n            checkSignBgEl.className = 'sign-bg'\n            checkSignBgEl.style['border-color'] = data.colors[label]\n\n            const labelEl = document.createElement('label')\n            labelEl.className = 'label'\n            labelEl.htmlFor = checkboxId\n            labelEl.textContent = data.names[label]\n\n            checkboxEl.appendChild(checkEl)\n            checkboxEl.appendChild(checkSignBgEl)\n            checkboxEl.appendChild(checkSignEl)\n            checkboxEl.appendChild(labelEl)\n            this.el.appendChild(checkboxEl)\n        }\n    }\n\n    render () {}\n\n    onCheck (label, checkboxEl) {\n        if (checkboxEl.checked) {\n            this.canvas.disable(label)\n            this.scrollCanvas.disable(label)\n        } else {\n            this.canvas.enable(label)\n            this.scrollCanvas.enable(label)\n        }\n    }\n}\n\nexport default Checkboxes\n","class Scrollbar {\n\n    constructor (data, canvas, scrollCanvas, options) {\n        this.data = data\n        this.canvas = canvas\n        this.scrollCanvas = scrollCanvas\n\n        this.el = document.createElement('div')\n        this.el.className = 'scroll'\n        this.leftAreaEl = document.createElement('div')\n        this.leftAreaEl.className = 'left_area'\n        this.rightAreaEl = document.createElement('div')\n        this.rightAreaEl.className = 'right_area'\n        this.scrollBoxEl = document.createElement('div')\n        this.scrollBoxEl.className = 'scroll-box'\n        this.scrollBoxLeftBorderEl = document.createElement('div')\n        this.scrollBoxLeftBorderEl.className = 'scroll-box-border-left'\n        this.scrollBoxRightBorderEl = document.createElement('div')\n        this.scrollBoxRightBorderEl.className = 'scroll-box-border-right'\n\n        this.scrollBoxEl.appendChild(this.scrollBoxLeftBorderEl)\n        this.scrollBoxEl.appendChild(this.scrollBoxRightBorderEl)\n\n        this.el.appendChild(scrollCanvas.el)\n        this.el.appendChild(this.leftAreaEl)\n        this.el.appendChild(this.rightAreaEl)\n        this.el.appendChild(this.scrollBoxEl)\n\n        this.from = options.from\n        this.to = options.to\n        this.padW = options.padW\n        this.bound = options.bound\n\n        this.move = 'no'\n\n        this.scrollBoxEl.addEventListener('mousedown', e => this.onMouseBoth(e))\n        this.scrollBoxLeftBorderEl.addEventListener('mousedown', e => this.onMouseLeft(e))\n        this.scrollBoxRightBorderEl.addEventListener('mousedown', e => this.onMouseRight(e))\n        this.el.addEventListener('mouseup', e => this.onMouseUp(e))\n        this.el.addEventListener('mouseleave', e => this.onMouseUp(e))\n        this.el.addEventListener('mousemove', e => this.onMouseMove(e))\n\n        this.scrollBoxEl.addEventListener('touchstart', e => this.onTouchBoth(e))\n        this.scrollBoxLeftBorderEl.addEventListener('touchstart', e => this.onTouchLeft(e))\n        this.scrollBoxRightBorderEl.addEventListener('touchstart', e => this.onTouchRight(e))\n        this.el.addEventListener('touchend', e => this.onTouchEnd(e))\n        this.el.addEventListener('touchmove', e => this.onTouchMove(e))\n    }\n\n    render () {\n        this.scrollCanvas.render()\n        this.drawAreas()\n        this.drawScrollBox()\n    }\n\n    drawAreas () {\n        const scrollWidth = this.el.offsetWidth - 2 * this.padW\n        this.leftAreaEl.style.width = (scrollWidth * this.from) + 'px'\n        this.leftAreaEl.style.left = (this.padW) + 'px'\n        this.rightAreaEl.style.width = (scrollWidth * (1 - this.to)) + 'px'\n        this.rightAreaEl.style.left = (this.padW + this.to * scrollWidth) + 'px'\n    }\n\n    drawScrollBox () {\n        const scrollWidth = this.el.offsetWidth - 2 * this.padW\n        this.scrollBoxEl.style.width = ((this.to - this.from) * scrollWidth) + 'px'\n        this.scrollBoxEl.style.left = (this.padW + this.from * scrollWidth) + 'px'\n    }\n\n    setNoMove () {\n        this.move = 'no'\n    }\n\n    setLeftMove (clientX) {\n        this.move = 'left'\n        this.leftOffset = clientX - this.scrollBoxEl.offsetLeft\n        this.lastWidth = this.scrollBoxEl.offsetWidth\n    }\n\n    setRightMove (clientX) {\n        this.move = 'right'\n        this.leftOffset = clientX - this.scrollBoxEl.offsetLeft\n        this.lastWidth = this.scrollBoxEl.offsetWidth\n    }\n\n    setBothMove (clientX) {\n        this.move = 'both'\n        this.leftOffset = clientX - this.scrollBoxEl.offsetLeft\n        this.lastWidth = this.scrollBoxEl.offsetWidth\n    }\n\n    setMove (moveOffset) {\n\n        if (this.move === 'no') {\n            return\n        }\n\n        const scrollWidth = this.el.offsetWidth - 2 * this.padW\n        const currentLeftOffset = moveOffset - this.scrollBoxEl.offsetLeft\n\n        const offsetDiff = currentLeftOffset - this.leftOffset\n        const dOffset = offsetDiff / scrollWidth\n        const bound = 2 * this.bound / scrollWidth\n\n        if (this.move === 'left') {\n            this.from += dOffset\n            if (this.from + bound > this.to) {\n                this.from = this.to - bound\n            }\n            if (this.from < 0) {\n                this.from = 0\n            }\n        } else if (this.move === 'right') {\n            const dOffset = (offsetDiff - this.scrollBoxEl.offsetWidth + this.lastWidth) / scrollWidth\n            this.to += dOffset\n            if (this.from + bound > this.to) {\n                this.to = this.from + bound\n            }\n            if (this.to > 1) {\n                this.to = 1\n            }\n        } else {\n            this.from += dOffset\n            this.to += dOffset\n            if (this.from < 0) {\n                this.to = this.to - this.from\n                this.from = 0\n            }\n            if (this.to > 1) {\n                this.from = this.from - (this.to - 1)\n                this.to = 1\n            }\n        }\n\n        this.drawAreas()\n        this.drawScrollBox()\n        this.canvas.move(this.from, this.to)\n    }\n\n    onMouseBoth (e) {\n        e.stopPropagation()\n        e.preventDefault()\n        this.setBothMove(e.clientX)\n    }\n\n    onMouseLeft (e) {\n        e.stopPropagation()\n        e.preventDefault()\n        this.setLeftMove(e.clientX)\n    }\n\n    onMouseRight (e) {\n        e.stopPropagation()\n        e.preventDefault()\n        this.setRightMove(e.clientX)\n    }\n\n    onMouseUp (e) {\n        e.stopPropagation()\n        e.preventDefault()\n        this.setNoMove(e.clientX)\n    }\n\n    onMouseMove (e) {\n        e.stopPropagation()\n        e.preventDefault()\n        this.setMove(e.clientX)\n    }\n\n    onTouchBoth (e) {\n        e.stopPropagation()\n        e.preventDefault()\n        this.setBothMove(e.targetTouches[0].clientX)\n    }\n\n    onTouchLeft (e) {\n        e.stopPropagation()\n        e.preventDefault()\n        this.setLeftMove(e.targetTouches[0].clientX)\n    }\n\n    onTouchRight (e) {\n        e.stopPropagation()\n        e.preventDefault()\n        this.setRightMove(e.targetTouches[0].clientX)\n    }\n\n    onTouchEnd (e) {\n        e.stopPropagation()\n        e.preventDefault()\n        this.setNoMove(e.changedTouches[0].clientX)\n    }\n\n    onTouchMove (e) {\n        e.stopPropagation()\n        e.preventDefault()\n        this.setMove(e.targetTouches[0].clientX)\n    }\n}\n\nexport default Scrollbar\n","class NightSwitch {\n\n    constructor (cb) {\n        this.cb = cb\n\n        this.state = false\n\n        this.el = document.createElement('div')\n        this.el.className = 'night-switch day'\n        this.textEl = document.createElement('span')\n        this.textEl.className = 'night-switch-text'\n        this.el.appendChild(this.textEl)\n\n        this.el.addEventListener('click', () => this.switch())\n\n        this.setText()\n    }\n\n    switch () {\n        this.state = !this.state\n        const bodyEl = document.getElementsByTagName('body')[0]\n        this.state ? bodyEl.className = 'night' : bodyEl.className = 'day'\n        this.state ? this.el.className = 'night-switch night' : this.el.className = 'night-switch day'\n        this.setText()\n        this.cb(this.state)\n    }\n\n    setText () {\n        this.textEl.textContent = this.state\n            ? 'Switch to Day Mode'\n            : 'Switch to Night Mode'\n    }\n}\n\nexport default NightSwitch\n","import Panel from './lib/panel'\nimport Canvas from './lib/canvas'\nimport Checkboxes from './lib/checkboxes'\nimport Scrollbar from './lib/scrollbar'\nimport ChartFactory from './lib/chart_factory'\nimport NightSwitch from './lib/night_switch'\n\nimport data from './data/chart_data.json'\n\nconst factory = new ChartFactory(Panel, Canvas, Scrollbar, Checkboxes)\n\nlet panels = []\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\n    const parent = document.getElementById('root')\n\n    for (let datum of data) {\n        panels.push(factory.create(datum, parent))\n    }\n\n    function switchMode (enable) {\n        panels.forEach(function (panel) {\n            panel.nightMode(enable)\n        })\n    }\n\n    const nightSwitch = new NightSwitch(switchMode)\n    parent.appendChild(nightSwitch.el)\n\n    function scale (width) {\n        panels.forEach(function (panel) {\n            panel.scale(width)\n        })\n    }\n\n    window.addEventListener('resize', function () {\n        scale(parent.offsetWidth)\n    })\n\n    scale(parent.offsetWidth)\n})\n","export default function (Panel, Canvas, Scrollbar, Checkboxes) {\n\n    let n = 1\n\n    return {\n\n        create: function (data, parent) {\n\n            const canvas = new Canvas(data, {\n                padW: 10,\n                padH: 20,\n                decor: true,\n                width: parent.offsetWidth,\n                height: 320,\n                lineWidth: 2,\n                from: 0.75,\n                to: 1,\n                datesDiff: 60,\n                fontFamily: 'Helvetica, sans-serif',\n                fontSize: 10,\n            })\n\n            const scrollCanvas = new Canvas(data, {\n                padW: 10,\n                padH: 4,\n                decor: false,\n                width: parent.offsetWidth,\n                height: 32,\n                lineWidth: 1,\n                from: 0,\n                to: 1,\n            })\n\n            const scrollbar = new Scrollbar(data, canvas, scrollCanvas, {\n                from: 0.75,\n                to: 1,\n                padW: 10,\n                bound: 10,\n            })\n\n            const checkboxes = new Checkboxes(data, canvas, scrollCanvas)\n\n            const panel = new Panel(canvas, scrollbar, scrollCanvas, checkboxes, {\n                header: 'Chart #' + n++,\n            })\n\n            parent.appendChild(panel.el)\n            panel.render()\n\n            return panel\n        },\n    }\n}\n"],"sourceRoot":""}