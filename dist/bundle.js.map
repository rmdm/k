{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/panel.js","webpack:///./lib/canvas.js","webpack:///./lib/checkboxes.js","webpack:///./lib/night_switch.js","webpack:///./index.js","webpack:///./lib/chart_factory.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Panel","canvas","checkboxes","options","_classCallCheck","this","div","document","createElement","className","titleEl","textContent","header","appendChild","el","render","width","setWidth","enable","nightMode","remove","pixelRatio","window","devicePixelRatio","toCssSize","fromCssSize","dateOffset","controlWidth","previewPadding","controlRadius","months","days","getAxisColor","alpha","colorFromRGBA","getMeshColor","previewBlurColor","previewControlColor","approximate","from","to","grade","val","g","b","a","Canvas","data","hex","_this","label","canvas_classCallCheck","decor","x","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","undefined","_step6","_iterator6","columns","iterator","next","done","column","types","err","return","getX","lines","result","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","push","getLines","canvasEl","ctx","getContext","setFont","setBasicSizes","setSize","currentLeft","scrollLeft","currentRight","scrollRight","currentRange","xDiff","length","lineStates","lineGrades","lineColors","names","colors","parseInt","slice","fromHeight","toHeight","currentHeight","getMaxY","heightGrade","fromPeriod","toPeriod","datesGrade","prevMs","legendEl","legendTitleEl","rulerEl","style","height","padH","legendLines","els","values","cross","lineEl","lineValEl","lineLabelEl","lineCrossEl","getLineColor","color","addEventListener","e","onMouseMove","onMouseLeave","onMouseEnter","onMouseUp","onMouseDown","onTouchMove","onTouchStart","onTouchEnd","moveDir","hideLegend","left","right","animate","display","_this2","animation","cancelAnimationFrame","requestAnimationFrame","step","ms","diffMs","animationGrade","linesDone","clearRect","clear","dX","dY","drawGrid","drawDates","drawLines","chartWidth","chartHeight","padW","lineWidth","previewHeight","previewOffsetH","previewLineWidth","drawScrollControlls","current","strokeStyle","beginPath","moveTo","lineTo","stroke","fromValuesDiff","toValuesDiff","fromLinesDiff","toLinesDiff","Math","round","drawGridLines","linesDiff","valuesDiff","fillStyle","y","fillText","textSize","datesDiff","currentDiff","fromFillStyle","toFillStyle","scale","toN","floor","drawDate","fromN","Date","text","getMonth","getDate","offsetW","offsetH","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","line","drawLine","scaleX","scaleY","getStrokeStyle","fromIndex","getLowerIndex","toIndex","getUpperIndex","prevX","prevXCoord","zeroH","yCoord","fromH","toH","drawRoundedRect","closePath","fill","fromX","toX","fromY","toY","leftRadius","rightRadius","quadraticCurveTo","dir","position","scrollStart","movePosition","dOffset","bound","move","someVisible","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","moveLegendTo","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","moveOffset","offsetLeft","getBoundingClientRect","closestIndex","getClosestIndex","percent","getDay","leftOffset","legendOffsetWidth","offsetWidth","additionalOffset","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","topOffset","top","offsetHeight","nextOffset","max","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","fontSize","resize","font","textFont","fontFamily","previewPadW","previewPadH","procent","min","arr","arguments","len","j","v","diff","binarySearch","border","canvasX","canvasY","fromW","toW","stopPropagation","setMove","clientX","getDir","clientY","setMoveDir","setNoMove","showLegend","ev","targetTouches","checkboxCount","Checkboxes","checkboxes_classCallCheck","_loop","checkboxId","checkboxEl","checkEl","type","id","onCheck","checkSignEl","checkSignBgEl","labelEl","htmlFor","checked","disable","NightSwitch","cb","night_switch_classCallCheck","state","textEl","switch","setText","bodyEl","getElementsByTagName","factory","parent","panel","panels","getElementById","datum","nightSwitch","forEach"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","class Panel {\n\n    constructor (canvas, checkboxes, options) {\n        const div = document.createElement('div')\n        div.className = 'panel'\n\n        const titleEl = document.createElement('h4')\n        titleEl.className = 'chart-title'\n        titleEl.textContent = options.header\n\n        div.appendChild(titleEl)\n        div.appendChild(canvas.el)\n        div.appendChild(checkboxes.el)\n        this.canvas = canvas\n        this.checkboxes = checkboxes\n        this.el = div\n    }\n\n    render () {\n        this.canvas.render()\n        this.checkboxes.render()\n    }\n\n    scale (width) {\n        this.canvas.setWidth(width, true)\n        this.render()\n    }\n\n    nightMode (enable) {\n        this.canvas.nightMode(enable)\n    }\n\n    destroy () {\n        this.el.remove()\n    }\n}\n\nexport default Panel\n","let pixelRatio = window.devicePixelRatio || 1\n\nfunction toCssSize (value) {\n    return value / pixelRatio\n}\n\nfunction fromCssSize (value) {\n    return value * pixelRatio\n}\n\nconst animationDurationMs = 250\nconst dateOffset = fromCssSize(18)\n\nconst controlWidth = fromCssSize(10)\nconst previewPadding = fromCssSize(2)\nconst controlRadius = fromCssSize(8)\n\nconst months = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n]\n\nconst days = [ \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\" ]\n\nconst getAxisColor = function (alpha) {\n    return colorFromRGBA(100, 130, 140, 0.7 * alpha)\n}\n\nconst getMeshColor = function (alpha) {\n    return colorFromRGBA(155, 180, 190, 0.2 * alpha)\n}\n\nlet previewBlurColor = colorFromRGBA(229, 243, 247, 0.5)\nlet previewControlColor = colorFromRGBA(186, 209, 223, 1)\n\nclass Canvas {\n\n    constructor (data, options) {\n\n        this.data = data\n        this.decor = options.decor\n\n        this.x = getX(data)\n        this.lines = getLines(data)\n\n        this.el = document.createElement('div')\n        this.el.className = 'chart'\n\n        this.canvasEl = document.createElement('canvas')\n        this.ctx = this.canvasEl.getContext('2d')\n\n        this.setFont(options)\n        this.setBasicSizes(options)\n        this.setSize(options)\n\n        this.currentLeft = this.scrollLeft = options.from\n        this.currentRight = this.scrollRight = options.to\n        this.currentRange = options.to - options.from\n\n        this.xDiff = this.x[this.x.length - 1] - this.x[1]\n\n        this.lineStates = {}\n        this.lineGrades = {}\n        this.lineColors = {}\n        for (let label in data.names) {\n            this.lineStates[label] = true\n            this.lineGrades[label] = 1\n            this.lineColors[label] = colorFromHex(data.colors[label])\n        }\n\n        this.fromHeight = this.toHeight = this.currentHeight =\n            this.getMaxY(options.from, options.to)\n        this.heightGrade = 1\n\n        this.fromPeriod = this.toPeriod = 0\n        this.datesGrade = 1\n\n        this.prevMs = undefined\n\n        this.el.appendChild(this.canvasEl)\n\n        this.legendEl = document.createElement('div')\n        this.legendEl.className = 'legend'\n\n        this.legendTitleEl = document.createElement('div')\n        this.legendTitleEl.className = 'legend-title'\n        this.legendEl.appendChild(this.legendTitleEl)\n\n        this.rulerEl = document.createElement('div')\n        this.rulerEl.className = 'ruler'\n        this.rulerEl.style.height = toCssSize(this.height - this.padH) + 'px'\n        this.el.appendChild(this.rulerEl)\n\n        this.legendLines = { els: {}, values: {}, cross: {} }\n        for (let label in data.names) {\n\n            const lineEl = this.legendLines.els[label] = document.createElement('div')\n            lineEl.className = 'legend-line'\n\n            const lineValEl = this.legendLines.values[label] = document.createElement('div')\n            lineValEl.className = 'legend-value'\n\n            const lineLabelEl = document.createElement('div')\n            lineLabelEl.className = 'legend-label'\n            lineLabelEl.textContent = data.names[label]\n\n            const lineCrossEl = this.legendLines.cross[label] = document.createElement('div')\n            lineCrossEl.className = 'line-cross'\n            lineCrossEl.style['border-color'] = this.getLineColor(label, 1)\n\n            this.el.appendChild(lineCrossEl)\n\n            lineEl.appendChild(lineValEl)\n            lineEl.appendChild(lineLabelEl)\n\n            lineEl.style.color = this.getLineColor(label, 1)\n            this.legendEl.appendChild(lineEl)\n        }\n\n        this.el.appendChild(this.legendEl)\n\n        this.el.addEventListener('mousemove', e => this.onMouseMove(e))\n        this.el.addEventListener('mouseleave', e => this.onMouseLeave(e))\n        this.el.addEventListener('mouseenter', e => this.onMouseEnter(e))\n        this.el.addEventListener('mouseup', e => this.onMouseUp(e))\n        this.el.addEventListener('mousedown', e => this.onMouseDown(e))\n\n        this.el.addEventListener('touchmove', e => this.onTouchMove(e))\n        this.el.addEventListener('touchstart', e => this.onTouchStart(e))\n        this.el.addEventListener('touchend', e => this.onTouchEnd(e))\n        this.moveDir = 'no'\n\n        this.hideLegend()\n    }\n\n    move (left, right) {\n        this.currentLeft = left\n        this.currentRight = right\n        this.currentRange = right - left\n        this.animate()\n    }\n\n    disable (label) {\n        if (this.lineStates[label]) {\n            this.lineStates[label] = false\n            this.lineGrades[label] = 1 - this.lineGrades[label]\n            this.animate()\n            if (this.decor) {\n                this.legendLines.els[label].style.display = 'none'\n                this.legendLines.cross[label].style.display = 'none'\n            }\n        }\n    }\n\n    enable (label) {\n        if (!this.lineStates[label]) {\n            this.lineStates[label] = true\n            this.lineGrades[label] = 1 - this.lineGrades[label]\n            this.animate()\n            if (this.decor) {\n                this.legendLines.els[label].style.display = 'inline-block'\n            }\n        }\n    }\n\n    animate () {\n\n        if (this.animation) {\n            cancelAnimationFrame(this.animation)\n        }\n\n        const step = (ms) => {\n\n            if (!this.prevMs) {\n                this.prevMs = ms\n                this.animation = requestAnimationFrame(step)\n                return\n            }\n\n            const diffMs = ms - this.prevMs\n            this.prevMs = ms\n\n            if (diffMs === 0) {\n                this.animation = requestAnimationFrame(step)\n                return\n            }\n\n            const animationGrade = diffMs / animationDurationMs\n\n            this.heightGrade += animationGrade\n            this.datesGrade += animationGrade\n\n            if (this.heightGrade >= 1) {\n                this.heightGrade = 1\n                this.fromHeight = this.toHeight\n            }\n\n            if (this.datesGrade >= 1) {\n                this.datesGrade = 1\n                this.fromPeriod = this.toPeriod\n            }\n\n            let linesDone = true\n            for (const label in this.lineGrades) {\n                this.lineGrades[label] += animationGrade\n                if (this.lineGrades[label] < 1) {\n                    linesDone = false\n                } else {\n                    this.lineGrades[label] = 1\n                }\n            }\n\n            if (this.heightGrade === 1 && this.datesGrade === 1 && linesDone) {\n                this.prevMs = undefined\n            } else {\n                this.animation = requestAnimationFrame(step)\n            }\n\n            this.render()\n        }\n\n        this.animation = requestAnimationFrame(step)\n    }\n\n    clear () {\n        this.ctx.clearRect(0, 0, this.width, this.height)\n    }\n\n    render () {\n        this.clear()\n        const dX = this.xDiff * (this.currentRange)\n        let dY = this.getMaxY(this.currentLeft, this.currentRight)\n\n        if (this.toHeight !== dY) {\n            this.fromHeight = this.currentHeight\n            this.heightGrade = 0\n            this.toHeight = dY\n        }\n\n        this.currentHeight = approximate(this.fromHeight, this.toHeight, this.heightGrade)\n\n        this.drawGrid(this.fromHeight, this.toHeight, this.currentHeight, this.heightGrade)\n        // render when needed\n        this.drawDates()\n\n        this.drawLines(this.chartWidth, this.chartHeight, this.padW, this.padH, this.currentLeft, this.currentRight, dX, this.currentHeight, this.lineWidth)\n\n        // render only on checkbox click\n        const previewHeight = approximate(this.fromHeight, this.getMaxY(0, 1), this.heightGrade)\n        this.drawLines(this.chartWidth, this.previewHeight, this.padW, this.previewOffsetH, 0, 1, this.xDiff, previewHeight, this.previewLineWidth)\n\n        this.drawScrollControlls()\n    }\n\n    drawGrid (from, to, current, grade) {\n\n        this.ctx.lineWidth = fromCssSize(this.lineWidth / 2)\n        this.ctx.strokeStyle = getMeshColor(1)\n\n        this.ctx.beginPath()\n\n        this.ctx.moveTo(this.padW, this.chartHeight + this.padH)\n        this.ctx.lineTo(this.padW + this.chartWidth, this.chartHeight + this.padH)\n\n        this.ctx.stroke()\n\n        let fromValuesDiff = from / 5\n        let toValuesDiff = to / 5\n        const fromLinesDiff = this.chartHeight / current * fromValuesDiff\n        const toLinesDiff = this.chartHeight / current * toValuesDiff\n        fromValuesDiff = Math.round(fromValuesDiff)\n        toValuesDiff = Math.round(toValuesDiff)\n\n        this.drawGridLines(toLinesDiff, toValuesDiff, grade)\n\n        if (grade < 1) {\n            this.drawGridLines(fromLinesDiff, fromValuesDiff, 1 - grade)\n        }\n    }\n\n    drawGridLines (linesDiff, valuesDiff, grade) {\n\n        this.ctx.fillStyle = getAxisColor(grade)\n        this.ctx.strokeStyle = getMeshColor(grade)\n        this.ctx.beginPath()\n\n        for (\n            let i = 0,\n                y = this.chartHeight + this.padH - linesDiff,\n                val = valuesDiff;\n            i < 5;\n            i++, y -= linesDiff, val += valuesDiff\n        ) {\n            this.ctx.fillText(val, this.padW, y - this.textSize / 2)\n            this.ctx.moveTo(this.padW, y)\n            this.ctx.lineTo(this.padW + this.chartWidth, y)\n        }\n\n        this.ctx.stroke()\n    }\n\n    drawDates () {\n\n        if (this.currentRange <= (1 / this.x.length)) {\n            this.fromPeriod = 0\n            return\n        }\n\n        if (this.fromPeriod === 0) {\n            this.fromPeriod = this.toPeriod =\n                this.datesDiff * (this.currentRange) / this.chartWidth\n        }\n\n        const currentDiff = this.toPeriod * this.chartWidth / (this.currentRange)\n\n        if (currentDiff >= 2 * this.datesDiff) {\n            this.toPeriod = this.toPeriod / 2\n            this.datesGrade = 0\n        } else if (currentDiff < this.datesDiff) {\n            if (this.fromPeriod < this.toPeriod) {\n                this.fromPeriod = this.fromPeriod * 2\n            }\n            this.toPeriod = this.toPeriod * 2\n            this.datesGrade = 0\n        }\n\n        const scale = this.chartWidth / (this.currentRange)\n        const y = this.chartHeight + this.padH + 1.5 * this.textSize\n\n        let fromFillStyle, toFillStyle\n\n        if (this.fromPeriod > this.toPeriod) {\n            toFillStyle = getAxisColor(this.datesGrade)\n            fromFillStyle = getAxisColor(1)\n        } else {\n            toFillStyle = getAxisColor(1)\n            fromFillStyle = getAxisColor(1 - this.datesGrade)\n        }\n\n        this.ctx.fillStyle = toFillStyle\n        const toN = Math.floor(this.currentLeft / this.toPeriod) - 1\n        for (let p = this.toPeriod * toN; p < this.currentRight + this.toPeriod; p += this.toPeriod) {\n            this.drawDate(p, scale, y)\n        }\n\n        this.ctx.fillStyle = fromFillStyle\n        const fromN = Math.floor(this.currentLeft / this.fromPeriod) - 1\n        for (let p = this.fromPeriod * fromN; p < this.currentRight + this.fromPeriod; p += this.fromPeriod) {\n            this.drawDate(p, scale, y)\n        }\n    }\n\n    drawDate (p, scale, y) {\n        const d = new Date(Math.floor(this.x[1] + this.xDiff * p))\n        const text = months[d.getMonth()] + ' ' + d.getDate()\n        this.ctx.fillText(text, this.padW + (p - this.currentLeft) * scale - dateOffset, y)\n    }\n\n    drawLines (width, height, offsetW, offsetH, left, right, dX, dY, lineWidth) {\n        for (let line of this.lines) {\n            if (this.lineStates[line[0]] || this.lineGrades[line[0]] < 1) {\n                this.drawLine(line, width, height, offsetW, offsetH, left, right, dX, dY, lineWidth)\n            }\n        }\n    }\n\n    drawLine (line, width, height, offsetW, offsetH, left, right, dX, dY, lineWidth) {\n\n        const scaleX = width / dX\n        const scaleY = height / dY\n\n        this.ctx.lineWidth = fromCssSize(lineWidth)\n        this.ctx.strokeStyle = this.getStrokeStyle(line)\n\n        const fromIndex = this.getLowerIndex(left - offsetW / width)\n        const toIndex = this.getUpperIndex(right + offsetW / width)\n\n        let prevX = this.x[fromIndex]\n        let prevXCoord = offsetW +\n            ((prevX - this.x[1]) / (this.xDiff) - left) * width / (right - left)\n\n        const zeroH = offsetH + height\n\n        this.ctx.beginPath()\n        this.ctx.moveTo(prevXCoord, zeroH - line[fromIndex] * scaleY)\n\n        for (let i = fromIndex + 1; i <= toIndex; i++) {\n\n            const x = this.x[i]\n            const y = line[i]\n\n            const yCoord = zeroH - y * scaleY\n\n            prevXCoord = prevXCoord + (x - prevX) * scaleX\n            this.ctx.lineTo(prevXCoord, yCoord)\n            prevX = x\n        }\n\n        this.ctx.stroke()\n    }\n\n    drawScrollControlls () {\n        const left = this.padW + this.currentLeft * this.chartWidth + controlWidth\n        const right = this.padW + this.currentRight * this.chartWidth - controlWidth\n        const fromH = this.previewOffsetH - previewPadding\n        const toH = this.previewOffsetH + this.previewHeight + previewPadding\n\n        this.ctx.fillStyle = previewBlurColor\n        this.ctx.beginPath()\n        this.drawRoundedRect(this.padW, left, fromH, toH, controlRadius, 0, previewBlurColor)\n        this.drawRoundedRect(right, this.width - this.padW, fromH, toH, 0, controlRadius, previewBlurColor)\n        this.ctx.closePath()\n        this.ctx.fill()\n\n        this.ctx.fillStyle = previewControlColor\n        this.ctx.beginPath()\n        this.drawRoundedRect(left - controlWidth, left, fromH, toH, controlRadius, 0, previewControlColor)\n        this.drawRoundedRect(right, right + controlWidth, fromH, toH, 0, controlRadius, previewControlColor)\n        this.ctx.closePath()\n        this.ctx.fill()\n\n        this.ctx.strokeStyle = previewControlColor\n        this.ctx.moveTo(left, fromH)\n        this.ctx.lineTo(right, fromH)\n        this.ctx.moveTo(left, toH)\n        this.ctx.lineTo(right, toH)\n        this.ctx.stroke()\n    }\n\n    drawRoundedRect (fromX, toX, fromY, toY, leftRadius, rightRadius) {\n        this.ctx.moveTo(fromX + leftRadius, fromY)\n        this.ctx.lineTo(toX - rightRadius, fromY)\n        this.ctx.quadraticCurveTo(toX, fromY, toX, fromY + rightRadius)\n        this.ctx.lineTo(toX, toY - rightRadius)\n        this.ctx.quadraticCurveTo(toX, toY, toX - rightRadius, toY)\n        this.ctx.lineTo(fromX + leftRadius, toY)\n        this.ctx.quadraticCurveTo(fromX, toY, fromX, toY - leftRadius)\n        this.ctx.lineTo(fromX, fromY + leftRadius)\n        this.ctx.quadraticCurveTo(fromX, fromY, fromX + leftRadius, fromY)\n    }\n\n    setNoMove () {\n        this.moveDir = 'no'\n        this.scrollLeft = this.currentLeft\n        this.scrollRight = this.currentRight\n    }\n\n    setMoveDir (dir, position) {\n        this.moveDir = dir\n        this.scrollStart = position\n        this.scrollLeft = this.currentLeft\n        this.scrollRight = this.currentRight\n    }\n\n    setMove (movePosition) {\n\n        if (this.moveDir === 'no') {\n            return\n        }\n\n        let from = this.scrollLeft, to = this.scrollRight\n\n        const offsetDiff = fromCssSize(movePosition - this.scrollStart)\n        const dOffset = offsetDiff / this.chartWidth\n        const bound = 2 * controlWidth / this.chartWidth\n\n        if (this.moveDir === 'left') {\n            from += dOffset\n            if (from + bound > to) {\n                from = to - bound\n            }\n            if (from < 0) {\n                from = 0\n            }\n        } else if (this.moveDir === 'right') {\n            to += dOffset\n            if (from + bound > to) {\n                to = from + bound\n            }\n            if (to > 1) {\n                to = 1\n            }\n        } else {\n            from += dOffset\n            to += dOffset\n            if (from < 0) {\n                to = to - from\n                from = 0\n            }\n            if (to > 1) {\n                from = from - (to - 1)\n                to = 1\n            }\n        }\n\n        this.move(from, to)\n    }\n\n    showLegend () {\n        let someVisible = false\n        for (const line of this.lines) {\n            if (this.lineStates[line[0]]) {\n                this.legendLines.cross[line[0]].style.display = 'block'\n                someVisible = true\n            }\n        }\n        if (someVisible) {\n            this.legendEl.style.display = 'inline-block'\n            this.rulerEl.style.display = 'block'\n            this.moveLegendTo(0)\n        }\n    }\n\n    hideLegend () {\n        this.legendEl.style.display = 'none'\n        this.rulerEl.style.display = 'none'\n        for (const line of this.lines) {\n            this.legendLines.cross[line[0]].style.display = 'none'\n        }\n    }\n\n    moveLegendTo (moveOffset) {\n\n        const canvasLeftOffset = this.el.getBoundingClientRect().left\n        const offsetLeft = fromCssSize(moveOffset - canvasLeftOffset)\n\n        let position = this.currentLeft + (offsetLeft - this.padW) / this.chartWidth * (this.currentRange)\n\n        if (position < this.currentLeft) {\n            position = this.currentLeft\n        } else if (position > this.currentRight) {\n            position = this.currentRight\n        }\n\n        const closestIndex = this.getClosestIndex(position)\n\n        const percent = (this.x[closestIndex] - this.x[1]) / this.xDiff\n\n        const d = new Date(Math.floor(this.x[1] + this.xDiff * percent))\n        const text = days[d.getDay()] + ', ' + months[d.getMonth()] + ' ' + d.getDate()\n\n        const xPos = this.padW + (percent - this.currentLeft) / (this.currentRange) * this.chartWidth\n\n        const leftOffset = toCssSize(xPos)\n\n        const legendOffsetWidth = this.legendEl.offsetWidth\n\n        let additionalOffset = 0\n\n        for (const line of this.lines) {\n            if (this.lineStates[line[0]]) {\n\n                const value = line[closestIndex]\n\n                const topOffset = toCssSize(this.padH + this.chartHeight - value / this.currentHeight * this.chartHeight)\n\n                this.legendLines.values[line[0]].textContent = value\n                this.legendLines.cross[line[0]].style.top = topOffset - 5 + 'px'\n                this.legendLines.cross[line[0]].style.left = leftOffset - 5 + 'px'\n                if (topOffset - 10 < this.legendEl.offsetHeight) {\n                    additionalOffset = legendOffsetWidth / 2 + 10\n                }\n            }\n        }\n\n        let nextOffset = leftOffset - legendOffsetWidth / 2 + additionalOffset\n\n        if (nextOffset < 0) {\n            additionalOffset = additionalOffset ? -additionalOffset : legendOffsetWidth / 2 + 10\n        }\n\n        const rightOverflow = nextOffset + legendOffsetWidth - toCssSize(this.chartWidth + this.padW)\n\n        if (rightOverflow > 0) {\n            additionalOffset = additionalOffset ? -additionalOffset : -legendOffsetWidth / 2 - 10\n        }\n\n        this.rulerEl.style.left = leftOffset + 'px'\n        this.legendEl.style.left = leftOffset - legendOffsetWidth / 2 + additionalOffset + 'px'\n\n        this.legendTitleEl.textContent = text\n    }\n\n    getMaxY (left, right) {\n\n        let max = 0\n\n        const from = this.getLowerIndex(left)\n        const to = this.getUpperIndex(right)\n\n        for (const line of this.lines) {\n\n            if (!this.lineStates[line[0]]) {\n                continue\n            }\n\n            for (let i = from; i < to; i++) {\n                if (line[i] > max) {\n                    max = line[i]\n                }\n            }\n        }\n\n        return max\n    }\n\n    getStrokeStyle (line) {\n        const label = line[0]\n        return this.lineStates[label]\n            ? this.getLineColor(label, this.lineGrades[label])\n            : this.getLineColor(label, (1 - this.lineGrades[label]))\n    }\n\n    setSize (options) {\n\n        this.setWidth(options.width)\n\n        const previewOffsetH = options.height + options.fontSize * 2\n        const height = previewOffsetH + options.previewHeight + options.padH\n\n        this.previewOffsetH = fromCssSize(previewOffsetH)\n\n        this.height = fromCssSize(height)\n        this.canvasEl.height = fromCssSize(height)\n        this.canvasEl.style.height = height + 'px'\n\n        this.chartHeight = fromCssSize(options.height - 2 * options.padH)\n    }\n\n    setWidth (width, resize) {\n\n        this.width = fromCssSize(width)\n        this.canvasEl.width = fromCssSize(width)\n        this.canvasEl.style.width = width + 'px'\n\n        this.chartWidth = this.width - 2 * this.padW\n\n        if (resize) {\n            this.ctx.font = this.textFont\n        }\n    }\n\n    setFont (options) {\n        this.textSize = fromCssSize(options.fontSize)\n        this.textFont = this.textSize + 'px ' + options.fontFamily\n        this.ctx.font = this.textFont\n    }\n\n    setBasicSizes (options) {\n        this.padW = fromCssSize(options.padW)\n        this.padH = fromCssSize(options.padH)\n        this.datesDiff = fromCssSize(options.datesDiff)\n        this.previewPadW = fromCssSize(options.previewPadW)\n        this.previewPadH = fromCssSize(options.previewPadH)\n        this.previewHeight = fromCssSize(options.previewHeight)\n        this.lineWidth = options.lineWidth\n        this.previewLineWidth = options.previewLineWidth\n    }\n\n    getLowerIndex (procent) {\n        const closestIndex = this.getClosestIndex(procent)\n        return Math.max(closestIndex - 1, 1)\n    }\n\n    getUpperIndex (procent) {\n        const closestIndex = this.getClosestIndex(procent)\n        return Math.min(closestIndex + 1, this.x.length - 1)\n    }\n\n    getClosestIndex (procent) {\n        const val = this.x[1] + this.xDiff * procent\n        return binarySearch(this.x, val, 1)\n    }\n\n    getLineColor (line, alpha) {\n        return this.lineColors[line] + alpha + ')'\n    }\n\n    getDir (x, y) {\n\n        const border = this.canvasEl.getBoundingClientRect()\n\n        const canvasX = fromCssSize(x - border.left)\n        const canvasY = fromCssSize(y - border.top)\n\n        const fromW = this.padW + this.currentLeft * this.chartWidth - controlWidth\n        const toW = this.padW + this.currentRight * this.chartWidth + controlWidth\n        const fromH = this.previewOffsetH - previewPadding\n        const toH = this.previewOffsetH + this.previewHeight + previewPadding\n\n        if (canvasX < fromW || canvasX > toW || canvasY < fromH || canvasY > toH) {\n            return 'no'\n        }\n\n        if (canvasX < fromW + 2 * controlWidth) {\n            return 'left'\n        } else if (canvasX > toW - 2 * controlWidth) {\n            return 'right'\n        } else {\n            return 'both'\n        }\n    }\n\n    nightMode (enable) {\n        if (enable) {\n            this.legendEl.className = 'legend night'\n            for (let label in this.legendLines.cross) {\n                this.legendLines.cross[label].className = 'line-cross night'\n            }\n            previewBlurColor = colorFromRGBA(28, 43, 53, 0.5)\n            previewControlColor = colorFromRGBA(84, 99, 108, 1)\n        } else {\n            this.legendEl.className = 'legend'\n            for (let label in this.legendLines.cross) {\n                this.legendLines.cross[label].className = 'line-cross'\n            }\n            previewBlurColor = colorFromRGBA(229, 243, 247, 0.5)\n            previewControlColor = colorFromRGBA(186, 209, 223, 1)\n        }\n        this.render()\n    }\n\n    onMouseMove (e) {\n        e.stopPropagation()\n        if (this.moveDir !== 'no') {\n            this.setMove(e.clientX)\n        } else {\n            this.moveLegendTo(e.clientX)\n        }\n    }\n\n    onMouseDown (e) {\n        const dir = this.getDir(e.clientX, e.clientY)\n        if (dir === 'no') {\n            return\n        }\n        this.setMoveDir(dir, e.clientX)\n    }\n\n    onMouseUp (e) {\n        this.setNoMove()\n        this.onMouseEnter(e)\n    }\n\n    onMouseEnter (e) {\n        e.stopPropagation()\n        this.showLegend()\n        this.moveLegendTo(e.clientX)\n    }\n\n    onMouseLeave (e) {\n        e.stopPropagation()\n        this.hideLegend()\n    }\n\n    onTouchMove (e) {\n        e.stopPropagation()\n\n        const ev = e.targetTouches[0]\n\n        if (this.moveDir !== 'no') {\n            this.setMove(ev.clientX)\n        } else {\n            this.moveLegendTo(ev.clientX)\n        }\n    }\n\n    onTouchStart (e) {\n        e.stopPropagation()\n\n        const ev = e.targetTouches[0]\n\n        const dir = this.getDir(ev.clientX, ev.clientY)\n        if (dir === 'no') {\n            this.showLegend()\n            this.moveLegendTo(ev.clientX)\n            return\n        }\n        this.setMoveDir(dir, ev.clientX)\n    }\n\n    onTouchEnd (e) {\n        e.stopPropagation()\n        this.setNoMove()\n        this.hideLegend()\n    }\n}\n\nfunction getX (data) {\n    for (let column of data.columns) {\n        if (data.types[column[0]] === 'x') {\n            return column\n        }\n    }\n}\n\nfunction getLines (data) {\n    const result = []\n    for (let column of data.columns) {\n        if (data.types[column[0]] === 'line') {\n            result.push(column)\n        }\n    }\n    return result\n}\n\nfunction approximate (from, to, grade) {\n\n    const val = (from - ( from - to ) * grade)\n\n    return val < 0 ? 0 : val\n}\n\nfunction colorFromRGBA (r, g, b, a) {\n    return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'\n}\n\nfunction colorFromHex (hex) {\n    return 'rgba('\n        + parseInt(hex.slice(1, 3), 16) + ','\n        + parseInt(hex.slice(3, 5), 16) + ','\n        + parseInt(hex.slice(5), 16) + ','\n}\n\nfunction binarySearch (arr, val, i = 0) {\n\n    const len = arr.length\n\n    let j = len - 1\n\n    while (i < j) {\n        const m = (j + i) >>> 1\n        const v = arr[m]\n        if (v > val) {\n            j = m - 1\n        } else if (v < val) {\n            i = m + 1\n        } else {\n            return m\n        }\n    }\n\n    const diff = val - arr[i]\n\n    if (diff > 0) {\n        return i < len - 1 && diff > arr[i+1] - val ? i + 1 : i\n    } else {\n        return i > 0 && diff < arr[i-1] - val ? i - 1 : i\n    }\n}\n\nexport default Canvas\n","let checkboxCount = 0\n\nclass Checkboxes {\n\n    constructor (data, canvas) {\n        this.data = data\n        this.canvas = canvas\n\n        this.el = document.createElement('div')\n        for (let label in data.names) {\n\n            const checkboxId = 'checkbox' + checkboxCount++\n\n            const checkboxEl = document.createElement('div')\n            checkboxEl.className = 'checkbox'\n\n            const checkEl = document.createElement('input')\n            checkEl.className = 'check'\n            checkEl.type = 'checkbox'\n            checkEl.id = checkboxId\n            checkEl.addEventListener('click', () => this.onCheck(label, checkEl))\n\n            const checkSignEl = document.createElement('div')\n            checkSignEl.className = 'sign'\n\n            const checkSignBgEl = document.createElement('div')\n            checkSignBgEl.className = 'sign-bg'\n            checkSignBgEl.style['border-color'] = data.colors[label]\n\n            const labelEl = document.createElement('label')\n            labelEl.className = 'label'\n            labelEl.htmlFor = checkboxId\n            labelEl.textContent = data.names[label]\n\n            checkboxEl.appendChild(checkEl)\n            checkboxEl.appendChild(checkSignBgEl)\n            checkboxEl.appendChild(checkSignEl)\n            checkboxEl.appendChild(labelEl)\n            this.el.appendChild(checkboxEl)\n        }\n    }\n\n    render () {}\n\n    onCheck (label, checkboxEl) {\n        if (checkboxEl.checked) {\n            this.canvas.disable(label)\n        } else {\n            this.canvas.enable(label)\n        }\n    }\n}\n\nexport default Checkboxes\n","class NightSwitch {\n\n    constructor (cb) {\n        this.cb = cb\n\n        this.state = false\n\n        this.el = document.createElement('div')\n        this.el.className = 'night-switch day'\n        this.textEl = document.createElement('span')\n        this.textEl.className = 'night-switch-text'\n        this.el.appendChild(this.textEl)\n\n        this.el.addEventListener('click', () => this.switch())\n\n        this.setText()\n    }\n\n    switch () {\n        this.state = !this.state\n        const bodyEl = document.getElementsByTagName('body')[0]\n        this.state ? bodyEl.className = 'night' : bodyEl.className = 'day'\n        this.state ? this.el.className = 'night-switch night' : this.el.className = 'night-switch day'\n        this.setText()\n        this.cb(this.state)\n    }\n\n    setText () {\n        this.textEl.textContent = this.state\n            ? 'Switch to Day Mode'\n            : 'Switch to Night Mode'\n    }\n}\n\nexport default NightSwitch\n","import Panel from './lib/panel'\nimport Canvas from './lib/canvas'\nimport Checkboxes from './lib/checkboxes'\nimport ChartFactory from './lib/chart_factory'\nimport NightSwitch from './lib/night_switch'\n\nimport data from './data/chart_data.json'\n\nconst factory = new ChartFactory(Panel, Canvas, Checkboxes)\n\nlet panels = []\n\ndocument.addEventListener('DOMContentLoaded', function () {\n\n    const parent = document.getElementById('root')\n\n    for (let datum of data) {\n        panels.push(factory.create(datum, parent))\n    }\n\n    function switchMode (enable) {\n        panels.forEach(function (panel) {\n            panel.nightMode(enable)\n        })\n    }\n\n    const nightSwitch = new NightSwitch(switchMode)\n    parent.appendChild(nightSwitch.el)\n\n    function scale (width) {\n        panels.forEach(function (panel) {\n            panel.scale(width)\n        })\n    }\n\n    window.addEventListener('resize', function () {\n        scale(parent.offsetWidth)\n    })\n\n    scale(parent.offsetWidth)\n})\n","export default function (Panel, Canvas, Checkboxes) {\n\n    let n = 1\n\n    return {\n\n        create: function (data, parent) {\n\n            const canvas = new Canvas(data, {\n                padW: 10,\n                padH: 20,\n                width: parent.offsetWidth,\n                height: 320,\n                lineWidth: 2,\n                previewPadW: 10,\n                previewPadH: 4,\n                previewHeight: 32,\n                previewLineWidth: 1,\n                from: 0.75,\n                to: 1,\n                datesDiff: 60,\n                fontFamily: 'Helvetica, sans-serif',\n                fontSize: 10,\n            })\n\n            const checkboxes = new Checkboxes(data, canvas)\n\n            const panel = new Panel(canvas, checkboxes, {\n                header: 'Chart #' + n++,\n            })\n\n            parent.appendChild(panel.el)\n            panel.render()\n\n            return panel\n        },\n    }\n}\n"],"sourceRoot":""}